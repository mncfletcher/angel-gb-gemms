#!/bin/bash

# RNAseq_Angel_GB_GEMMs_process.sh
#
# script to generate sh scripts to submit, per-sample, mouse glioma RNAseq data for:
# STAR alignment + cleanup + counting; then RSeQC
#
# 20190326
# by Mike
#
# based on RNAseq_mouse_glioma_STARalign.sh, RNAseq_mouse_glioma_RSeQC.sh
# which were based on Christian's pa_rna_normal_alignment.sh

###########################################################################
# define paths for analysis:
###########################################################################
#
# project directory with all data...:
PROJECT_DIR="/icgc/dkfzlsdf/analysis/B060/fletcher/RNAseq_Angel_GB_GEMMs"

# Fastq file dir:
FASTQ_DIR=${PROJECT_DIR}/fastq

# script directory - for the output cluster shell scripts generated by this:
SCRIPT_DIR=${PROJECT_DIR}/scripts

# output dir for finished, sorted, mkdup alignments:
ALIGNMENT_DIR=${PROJECT_DIR}/STARalignment

# output dir for counts files
COUNTS_DIR=${PROJECT_DIR}/counts

# temp dir for temp bits
TEMP_DIR=${PROJECT_DIR}/temp

# RSeQC requires annotation in bed format - downloaded from their website
# https://downloads.sourceforge.net/project/rseqc/BED/Mouse_Mus_musculus/mm10_GENCODE_VM11_basic.bed.gz
# remove leading 'chr' because Gencode GTF used (see $ref_annotation below) also doesn't have 'chr'.
RSEQC_BED="/icgc/dkfzlsdf/analysis/B060/fletcher/RNAseq_mouse_glioma/resources/mm10_GENCODE_VM11_basic_noChr.bed"
# read length - needed for RSeQC:
# for this data, it's 52bp PE.
READ_LENGTH="52"
# read type = SE or PE
# for this mouse glioma data it's PE
READ_TYPE="PE"

# timestamp for adding to scripts
TIMESTAMP=`date -Is`

###########################################################################
# define settings for analysis: 
###########################################################################
data_split=60
ref_genome="/icgc/ngs_share/assemblies/mm10/indexes/STAR/STAR_2.3.0e_GencodeM2_101bp" # MM10 for STAR... hopefully this works...
ref_annotation="/icgc/ngs_share/assemblies/mm10/databases/gencode/gencodeM2/gencode.vM2.annotation_plain.gtf" # need "plain" with no leading 'chr' in chrom names
genomeLoad=LoadAndRemove
number_thread_star=10
mismatch_cond=2
minBM=16
intronMin=21
#temp_dir=/data/tmp/aichmuel
java_max_heap_size=31G
number_thread_picard=15
threads_feature_count=10
threads_rna_seq=5
number_thread_duplicates=2

###########################################################################
#
# Extract sample IDs from listing the FQ dir contents:
#
# FQ files as follows: 0148_003_CE_NOR_1TR1_RL1_S11_L001_R1_001-pooled.fastq.gz
# and 				   0148_003_CE_NOR_1TR1_RL1_S11_L001_R2_001-pooled.fastq.gz
#
# for IDs take everything preceding the _R1 or _R2 part of the filenames
# (need to take 1st+2nd fields after splitting on _R because that occurs once before in filename)
#
###########################################################################

sample_ids=`find ${FASTQ_DIR} -name "0148_0*.fastq.gz" | awk -F"_R" 'BEGIN{OFS="_R"}; {print $1,$2}' | awk -F/ '{print $NF}' | sort | uniq ` 

length_sample_ids=`echo $sample_ids | wc -w`

######################################################################################################
# Transfrom sample ids vector into arrays in order to make them usable in a for-loop, which needs indices...
######################################################################################################

sample_ids_array=( $sample_ids )

#####################################################################
# Run for normal alignment, marking duplicates, sortig and clipping #
#####################################################################
for (( i=0; i<=`echo $length_sample_ids - 1|bc`; i++ ))
do
	
	# Create .sh-file for tbi-pbs cluster submit 
	if [ -e ${SCRIPT_DIR}/cluster_STARalign_${sample_ids_array[$i]}.sh ]
	then 
		echo "File cluster_STARalign_${sample_ids_array[$i]}.sh exists --> Will be deleted to avoid redundancy and newly created!"
		rm ${SCRIPT_DIR}/cluster_STARalign_${sample_ids_array[$i]}.sh
		touch ${SCRIPT_DIR}/cluster_STARalign_${sample_ids_array[$i]}.sh
	else
		echo "File does not exist --> created!"
		touch ${SCRIPT_DIR}/cluster_STARalign_${sample_ids_array[$i]}.sh 
	fi	

	# Define .fasta one and two file
	fasta_1=`find ${FASTQ_DIR} -name "${sample_ids_array[$i]}_R1_001-pooled.fastq.gz"`
	fasta_2=`find ${FASTQ_DIR} -name "${sample_ids_array[$i]}_R2_001-pooled.fastq.gz"`

	#if [ `echo $fasta_1| wc -w` -ne 1 -a `echo $fasta_2| wc -w` -eq `echo $fasta_1| wc -w` ]
	#then               
	
	# RG info for alignment for multiple fastq files: we have paired ends per sample, so just looka t the first one:
	#
	# example: @A00259:67:HG7JMDMXX:1:1101:2139:1000 1:N:0:ATGCCTAA
	# (from 0148_010_CE_DIS_1TR1_RL1_S20_L001_R1_001-pooled.fastq.gz)
	#
	# see https://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_FASTQFiles.htm
	#
	# from GATK docs: https://software.broadinstitute.org/gatk/documentation/article.php?id=6472
	# ID = Read Group Identifier - must be unique
	# PU = Platform unit - flowcellbarcode.lane.samplebarcode
	fqhead=`zcat $fasta_1 | head -n 1 | sed s/\@// | awk -F" " '{print $1}'` # get FQ header
	# generate RG ID:
    rgID=`echo ${fqhead}`
    # generate PU as above:
	barcode=`echo ${fqhead} | awk -v sampleid=${sample_ids_array[$i]} 'BEGIN {{FS=":"}} {{print $3"_"$4"_"sampleid}}'`
	
	#rgID_meta=`awk -v intermed=$fqhead_2 'BEGIN {gsub("@","",intermed) ; print intermed}'`
	#rgID_meta_2=`awk -v intermed=$rgID_meta 'BEGIN {gsub(":","_",intermed) ; print intermed}'`
    
	#else
		
		# Sequence info for  alignment if only one fastq-file is available 
		# NOT USED - we have paired ends for all samples
    #    	Reads=`find /icgc/dkfzlsdf/project/pedbrain/pa/sequencing/rna_sequencing/view-by-pid/${sample_ids_array[$i]}/tumor/paired -name '*_1_sequence.txt.gz'`
    #    	fqhead=`zcat $Reads|head -n 1`
    #    	rgID_meta=`awk -v intermed=$fqhead 'BEGIN {gsub("@","",intermed) ; print intermed}'`
    #            rgID_meta_2=`awk -v intermed=$rgID_meta 'BEGIN {gsub(":","_",intermed) ; print intermed}'`
    #            rgID=`echo $rgID_meta_2 | awk 'BEGIN{{FS="_"}}{{print $1}}'`
    #            barcode=`echo $rgID_meta_2| awk 'BEGIN{{FS="_"}}{{print $2"_"$3"_"$4"_"$5"_"$6}}'`
	#fi
      
	# Complete alignment            
    	echo "
#!/bin/sh	
#PBS -l nodes=1:ppn=$number_thread_star
#PBS -l walltime=11:59:59
#PBS -l mem=30GB
#PBS -N RNAseq_Angel_GB_GEMMs_process_${sample_ids_array[$i]}
#PBS -M m.fletcher@dkfz-heidelberg.de
#PBS -j oe ${PROJECT_DIR}/logs/STARalign_${sample_ids_array[$i]}_out.log 
#PBS -m ae 
#PBS -p 1023

module load STAR/2.5.2a
module load biobambam2/2.0.72-foss-2017a
module load sambamba/0.6.6
module load BamUtil/1.0.9-foss-2017a
module load Subread/1.5.3-foss-2017a 

# script auto-generated by RNAseq_Angel_GB_GEMMs_process.sh
# on ${TIMESTAMP}

# make sample dir in view-by-pid alignment dir:
mkdir ${ALIGNMENT_DIR}/${sample_ids_array[$i]}

# run STAR:
STAR --runMode alignReads \
--genomeDir $ref_genome \
--runThreadN $number_thread_star \
--readFilesIn $fasta_1 $fasta_2 \
--readFilesCommand zcat \
--outTmpDir ${TEMP_DIR}/STAR_${sample_ids_array[$i]} \
--outFilterMismatchNmax 2 \
--outFilterMismatchNoverLmax 0.05 \
--alignIntronMax 1 \
--outFilterMatchNminOverLread 0.95 \
--outFilterScoreMinOverLread 0.95 \
--outFilterMultimapNmax 10 \
--outFilterIntronMotifs RemoveNoncanonical \
--outFilterType BySJout \
--outSAMunmapped Within \
--outSAMattributes Standard \
--alignIntronMin 21 \
--outFilterMatchNmin 16 \
--outSAMattrRGline ID:$rgID PU:$barcode SM:${sample_ids_array[$i]} LB:nssRNA PL:Illumina \
--outFileNamePrefix ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}. \
--outSAMtype BAM SortedByCoordinate \
--outStd Log

mkdir ${TEMP_DIR}/sambamba_tmp_${sample_ids_array[$i]}/

sambamba markdup \
--nthreads=$number_thread_star \
--tmpdir=${TEMP_DIR}/sambamba_tmp_${sample_ids_array[$i]}/ \
${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.Aligned.sortedByCoord.out.bam \
${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.bam

sambamba index -t $number_thread_star ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.bam

touch ${TEMP_DIR}/${sample_ids_array[$i]}_bamcollate2.txt

bamcollate2 \
filename=${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.bam \
inputformat=bam \
outputthreads=`echo "$number_thread_star - 1"|bc` \
T=${TEMP_DIR}/${sample_ids_array[$i]}_bamcollate2.txt | \
bam clipOverlap \
--readName \
--in -.bam \
--out ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.mdup.clipped.bam

sambamba sort -t $number_thread_star -o ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.clipped.bam ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.mdup.clipped.bam --tmpdir=${TEMP_DIR}/sambamba_tmp_${sample_ids_array[$i]}/

sambamba index -t $number_thread_star ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.clipped.bam

rm ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.mdup.clipped.bam ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.Aligned.sortedByCoord.out.bam 

# run featureCounts: 
# generate per-sample output dir
mkdir -p ${COUNTS_DIR}/${sample_ids_array[$i]}/
# use Q=255 for uniquely mapped only, -p for paired end data, -T for #CPUs, 
# -t for feature type to count against, -g to aggregate features to gene_ids, -a for annotation (=transcriptome gtf)
featureCounts -Q 255 -p -T $number_thread_star -t exon -g gene_id -a ${ref_annotation} \
-o ${COUNTS_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.gencodevM2.featureCounts.txt \
${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.clipped.bam" >> ${SCRIPT_DIR}/cluster_STARalign_${sample_ids_array[$i]}.sh
done

###########################################################################
#
# generate cluster scripts to run RSeQC:
#
# Extract sample IDs from listing the alignment dir contents; this is a view-by-pid dir
#
# final aligned bams called as follows: 99260.sorted.mdup.clipped.bam
#
###########################################################################
#####################################################################
# Generate scripts
#####################################################################
for i in ${sample_ids[@]}
do
	
	# Create .sh files for tbi-pbs cluster submit:
	if [ -e ${SCRIPT_DIR}/cluster_RSeQC_${i}.sh ]
	then 
		echo "${i}: cluster_RSeQC_${i}.sh exists --> Will be deleted to avoid redundancy and newly created!"
		rm ${SCRIPT_DIR}/cluster_RSeQC_${i}.sh
		touch ${SCRIPT_DIR}/cluster_RSeQC_${i}.sh
	else
		echo "${i}: cluster_RSeQC_${i}.sh does not exist --> created!"
		touch ${SCRIPT_DIR}/cluster_RSeQC_${i}.sh 
	fi	
	
	# timestamp for output script
	TIMESTAMP=`date -Is`
	   
    	echo "
#!/bin/sh	
#PBS -l nodes=1:ppn=1
#PBS -l walltime=12:00:00
#PBS -l mem=8GB
#PBS -N RNAseq_mouse_glioma_${i}_RSeQC
#PBS -M m.fletcher@dkfz-heidelberg.de
#PBS -j oe ${PROJECT_DIR}/logs/RSeQC_${i}_out.log 
#PBS -m ae 
#PBS -p 1023

# script auto-generated by RNAseq_Angel_GB_GEMMs_process.sh
# on ${TIMESTAMP}

# LOAD MODULES
module load RSeQC/2.6.4-foss-2017a-Python-2.7.12-R-3.4.0

# run deletion profile
deletion_profile.py -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -l ${READ_LENGTH} -o ${ALIGNMENT_DIR}/${i}/${i}

# run infer experiment
infer_experiment.py -r ${RSEQC_BED} -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam > ${ALIGNMENT_DIR}/${i}/${i}.infer_experiment.out

# run inner distance
inner_distance.py -r ${RSEQC_BED} -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -o ${ALIGNMENT_DIR}/${i}/${i}

# run insertion profile
insertion_profile.py -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -s ${READ_TYPE} -o ${ALIGNMENT_DIR}/${i}/${i}

# run junction anno
junction_annotation.py -r ${RSEQC_BED} -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -o ${ALIGNMENT_DIR}/${i}/${i}

# run junction saturaion
junction_saturation.py -r ${RSEQC_BED} -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -o ${ALIGNMENT_DIR}/${i}/${i}

# run read distribution
read_distribution.py -r ${RSEQC_BED} -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam > ${ALIGNMENT_DIR}/${i}/${i}.read_distribution.out

# run GC content
read_GC.py -i ${ALIGNMENT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -o ${ALIGNMENT_DIR}/${i}/${i}

# run gene body coverage
geneBody_coverage.py -r ${RSEQC_BED} -i ${OUTPUT_DIR}/${i}/${i}.sorted.mdup.clipped.bam -o ${ALIGNMENT_DIR}/${i}/${i}_geneBody_coverage
" >> ${SCRIPT_DIR}/cluster_RSeQC_${i}.sh
done