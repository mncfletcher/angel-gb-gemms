#!/bin/bash

# WES_SE_Angel_GB_GEMMs_process.sh
#
# script to generate sh scripts to submit, per-sample, mouse glioma WES data for:
# BWA-MEM alignment, Picard mkdup, saving final processed bam
#
##########################################
# NOTE THIS ALIGNS SE DATA!!! FOR PE, use: WES_Angel_GB_GEMMs_process.sh
##########################################
#
# 20191126
# by Mike
#
###########################################################################
# define paths for analysis:
###########################################################################
#
# project directory with all data...:
PROJECT_DIR="/icgc/dkfzlsdf/analysis/B060/fletcher/RNAseq_Angel_GB_GEMMs"

# Fastq file dir (for WES)
FASTQ_DIR=${PROJECT_DIR}/fastq_wes

# script directory - for the output cluster shell scripts generated by this:
SCRIPT_DIR=${PROJECT_DIR}/scripts

# output dir for finished, sorted, mkdup alignments:
ALIGNMENT_DIR=${PROJECT_DIR}/bwa

# temp dir for temp bits
TEMP_DIR=${PROJECT_DIR}/temp

# timestamp for adding to scripts
TIMESTAMP=`date -Is`

###########################################################################
# define settings for analysis: 
###########################################################################
# BWA needs the genome .fa - use the GRCm38m11 reference:
GENOME_FA="/icgc/ngs_share/assemblies/mm10/indexes/bwa/bwa06/bwa06_GRCm38mm10/GRCm38mm10.fa"

# number of threads (i.e. cores) to request/use
number_thread_bwa=8

###########################################################################
#
# Extract sample IDs from listing the FQ dir contents:
#
# FQ (SE) files as follows: WES_C57Bl6_normal_01_ERR424590.fastq.gz
#
# for IDs take the file basename
#
###########################################################################

sample_ids=`find ${FASTQ_DIR} -name "WES_C57Bl6_normal_0?_ERR42459?.fastq.gz" | awk -F"." '{print $1}' | awk -F/ '{print $NF}' | sort | uniq ` 

length_sample_ids=`echo $sample_ids | wc -w`

######################################################################################################
# Transfrom sample ids vector into arrays in order to make them usable in a for-loop, which needs indices...
######################################################################################################

sample_ids_array=( $sample_ids )

#####################################################################
# Run for normal BWA alignment, marking duplicates, sortig 
#####################################################################
for (( i=0; i<=`echo $length_sample_ids - 1|bc`; i++ ))
do
	
	# Create .sh-file for tbi-pbs cluster submit 
	if [ -e ${SCRIPT_DIR}/cluster_BWA_SE_${sample_ids_array[$i]}.sh ]
	then 
		echo "File cluster_BWA_${sample_ids_array[$i]}.sh exists --> Will be deleted to avoid redundancy and newly created!"
		rm ${SCRIPT_DIR}/cluster_BWA_SE_${sample_ids_array[$i]}.sh
		touch ${SCRIPT_DIR}/cluster_BWA_SE_${sample_ids_array[$i]}.sh
	else
		echo "File does not exist --> created!"
		touch ${SCRIPT_DIR}/cluster_BWA_SE_${sample_ids_array[$i]}.sh 
	fi	

	# Define paths to .fasta
	fasta_1=`find ${FASTQ_DIR} -name "${sample_ids_array[$i]}.fastq.gz"`

	#if [ `echo $fasta_1| wc -w` -ne 1 -a `echo $fasta_2| wc -w` -eq `echo $fasta_1| wc -w` ]
	#then               
	
	# RG info for alignment for multiple fastq files: we have paired ends per sample, so just looka t the first one:
	#
	# example: @ERR424591.1 HWI-ST138_0105:3:1:1173:2189#NNNNNN length=50
	# (from WES_C57Bl6_normal_02_ERR424591.fastq.gz)
	#
	# see https://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_FASTQFiles.htm
	#
	# from GATK docs: https://software.broadinstitute.org/gatk/documentation/article.php?id=6472
	# ID = Read Group Identifier - must be unique
	# PU = Platform unit - flowcellbarcode.lane.samplebarcode
	fqhead=`zcat $fasta_1 | head -n 1 | sed s/\@// | awk -F" " '{print $1}'` # get FQ header
	# generate RG ID:
    rgID=`echo ${fqhead}`
    # generate PU as above:
	barcode=`echo ${fqhead} | awk -v sampleid=${sample_ids_array[$i]} 'BEGIN {{FS=":"}} {{print $3"_"$4"_"sampleid}}'`
	
	#rgID_meta=`awk -v intermed=$fqhead_2 'BEGIN {gsub("@","",intermed) ; print intermed}'`
	#rgID_meta_2=`awk -v intermed=$rgID_meta 'BEGIN {gsub(":","_",intermed) ; print intermed}'`
    
	#else
		
		# Sequence info for  alignment if only one fastq-file is available 
		# NOT USED - we have paired ends for all samples
    #    	Reads=`find /icgc/dkfzlsdf/project/pedbrain/pa/sequencing/rna_sequencing/view-by-pid/${sample_ids_array[$i]}/tumor/paired -name '*_1_sequence.txt.gz'`
    #    	fqhead=`zcat $Reads|head -n 1`
    #    	rgID_meta=`awk -v intermed=$fqhead 'BEGIN {gsub("@","",intermed) ; print intermed}'`
    #            rgID_meta_2=`awk -v intermed=$rgID_meta 'BEGIN {gsub(":","_",intermed) ; print intermed}'`
    #            rgID=`echo $rgID_meta_2 | awk 'BEGIN{{FS="_"}}{{print $1}}'`
    #            barcode=`echo $rgID_meta_2| awk 'BEGIN{{FS="_"}}{{print $2"_"$3"_"$4"_"$5"_"$6}}'`
	#fi
      
	# Complete alignment            
    	echo "
#!/bin/sh	
#PBS -l nodes=1:ppn=$number_thread_bwa
#PBS -l walltime=11:59:59
#PBS -l mem=8GB
#PBS -N WES_SE_Angel_GB_GEMMs_process_${sample_ids_array[$i]}
#PBS -M m.fletcher@dkfz-heidelberg.de
#PBS -j oe ${PROJECT_DIR}/logs/WES_SE_BWA_${sample_ids_array[$i]}_out.log 
#PBS -m ae 
#PBS -p 1023

module load BWA/0.7.15
module load sambamba/0.6.6
module load SAMtools/1.9-foss-2017a

# script auto-generated by WES_SE_Angel_GB_GEMMs_process.sh
# on ${TIMESTAMP}

# make sample dir in view-by-pid alignment dir:
mkdir -p ${ALIGNMENT_DIR}/${sample_ids_array[$i]}

# run bwa-mem:
# 
# options:
# -M output secondary alignments
# -t #CPU threads to use
# -T 0 output all alignments (quality score > 0)
#
# then use SAMtools view to convert to uncompressed bam (-u), then pass to samtools sort -> sorted bam
bwa mem -M -t $number_thread_bwa -T 0 \
${GENOME_FA} \
${fasta_1} | samtools view -u | samtools sort -o ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.bam -

# make temp directory
mkdir ${TEMP_DIR}/sambamba_tmp_${sample_ids_array[$i]}/

# mark dupes with sambamba
sambamba markdup \
--nthreads=$number_thread_bwa \
--tmpdir=${TEMP_DIR}/sambamba_tmp_${sample_ids_array[$i]}/ \
${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.bam \
${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.bam

# index with sambamba
sambamba index -t $number_thread_bwa ${ALIGNMENT_DIR}/${sample_ids_array[$i]}/${sample_ids_array[$i]}.sorted.mdup.bam" >> ${SCRIPT_DIR}/cluster_BWA_SE_${sample_ids_array[$i]}.sh
done